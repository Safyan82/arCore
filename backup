
<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport"
        content="width=device-width">
  <title>WebXR</title>

  <!-- three.js -->
  <script defer src="https://unpkg.com/three@0.126.0/build/three.js"></script>
  
  <script defer src="https://unpkg.com/three@0.126.0/examples/js/loaders/GLTFLoader.js"></script>
  <script src="./assets/qr.js"></script>
</head>
<body >

  <button id="reader" onclick="activateXR()">start experince</button>

<script>
  

async function activateXR() {
 
  // Add a canvas element and initialize a WebGL context that is compatible with WebXR.
  const canvas = document.createElement("canvas");
  document.body.appendChild(canvas);
  const gl = canvas.getContext("webgl", {xrCompatible: true});

  // To be continued in upcoming steps.
  const scene = new THREE.Scene();
  const color = 0xFFFFFF;
  const intensity = 1;
  const light = new THREE.AmbientLight(color, intensity);
  scene.add(light);
  // const directionalLight = new THREE.DirectionalLight(0xffffff, 0.9);
  //   directionalLight.position.set(0, 0, 0);
  //   scene.add(directionalLight);

// Set up the WebGLRenderer, which handles rendering to the session's base layer.
const renderer = new THREE.WebGLRenderer({
  alpha: true,
  preserveDrawingBuffer: true,
  canvas: canvas,
  context: gl
});

renderer.autoClear = false;

const camera = new THREE.PerspectiveCamera();
camera.matrixAutoUpdate = false;
const session = await navigator.xr.requestSession("immersive-ar" , {requiredFeatures: ['hit-test']});
session.updateRenderState({
  baseLayer: new XRWebGLLayer(session, gl)
});

const referenceSpace = await session.requestReferenceSpace('local');

// Create another XRReferenceSpace that has the viewer as the origin.
const viewerSpace = await session.requestReferenceSpace('viewer');
// Perform hit testing using the viewer as origin.
const hitTestSource = await session.requestHitTestSource({ space: viewerSpace });

const loader = new THREE.GLTFLoader();
let reticle;
loader.load("/Arcore/models/reticle.gltf", function(gltf) {
  reticle = gltf.scene;
  reticle.visible = false;
  scene.add(reticle);
})

let flower;
await loader.load("/Arcore/lightGallery.glb", function(gltf) {
  flower = gltf.scene;
});

session.addEventListener("select", (event) => {
    if (flower) {
        const clone = flower.clone();
        clone.position.copy(reticle.position);
        scene.add(clone);
    }
    });


const onXRFrame = (time, frame) => {
  session.requestAnimationFrame(onXRFrame);

  gl.bindFramebuffer(gl.FRAMEBUFFER, session.renderState.baseLayer.framebuffer)

  const pose = frame.getViewerPose(referenceSpace);
  if (pose) {

    // In mobile AR, we only have one view.
    const view = pose.views[0];
  
    const viewport = session.renderState.baseLayer.getViewport(view);
    renderer.setSize(viewport.width, viewport.height)

    // Use the view's transform matrix and projection matrix to configure the THREE.camera.
    camera.matrix.fromArray(view.transform.matrix)
    camera.projectionMatrix.fromArray(view.projectionMatrix);
    camera.updateMatrixWorld(true);


    const hitTestResults = frame.getHitTestResults(hitTestSource);
    if (hitTestResults.length > 0 && reticle) {
    const hitPose = hitTestResults[0].getPose(referenceSpace);
    reticle.visible = true;
    reticle.position.set(hitPose.transform.position.x, hitPose.transform.position.y, hitPose.transform.position.z)
    reticle.updateMatrixWorld(true);
    } 
    

    
    // Render the scene with THREE.WebGLRenderer.
    renderer.render(scene, camera)
  }
}
session.requestAnimationFrame(onXRFrame);
}

// setTimeout(async()=>{
//   await activateXR()
// },1000)



</script>
</body>
</html>